{"version":3,"sources":["main.js","js/remote.js","js/sync.js","js/sync_list.js","js/utility.js"],"names":["$","loadPage","page","$pageBody","load","responseText","textStatus","jqXHR","attr","window","JSVIEW","ready","swal","defaultPage","onhashchange","location","hash","substr","jQuery","context","click","e","stopPropagation","preventDefault","action","target","attributes","value","title","capitalize","text","showCancelButton","confirm","get","then","setTimeout","document","reload","fail","errorThrown","type","code","origin","qrcode","width","height","sid","closeOnConfirm","post","String","prototype","this","charAt","toUpperCase","slice"],"mappings":"cAAA,SAACA,GAaG,QAASC,GAASC,GACd,GAAIC,GAAYH,EAAE,aAClBG,GAAUC,KAAK,IAAMF,EACjB,SAACG,EAAcC,EAAYC,GACJ,YAAfD,GACAH,EAAUK,KAAK,YAAaN,GAE5BO,OAAOC,OAAOR,IAASO,OAAOC,OAAOR,GAAMS,MAAMR,IAEjDS,KAAK,oBApBrBH,OAAOC,UAyBPV,EAAE,WAEE,GAAMa,GAAc,MAEpBJ,QAAOK,aAAgB,WACnBb,EAASc,SAASC,KAAKC,OAAO,IAAMJ,IAGxCZ,EAASc,SAASC,KAAKC,OAAO,IAAMJ,MAEzCK,QCrCH,SAAClB,GACGS,OAAOC,OAAP,QACIC,MAAO,SAACQ,GACJnB,EAAE,sBAAuBmB,GAASC,MAAM,SAAAC,GACpCA,EAAEC,kBACFD,EAAEE,gBAEF,IAAMC,GAASH,EAAEI,OAAOC,WAAW,eAAeC,KAElDf,OACQgB,MAAOJ,EAAOK,aAAe,oBAC7BC,KAAM,+BACNC,kBAAkB,GAEtB,SAAAC,GACQA,GACAhC,EAAEiC,IAAI,WAAaT,GAAQU,KAAK,WAE5BC,WAAW,WAAQC,SAASrB,SAASsB,QAAO,IAAU,OACvDC,KAAK,SAAC/B,EAAOD,EAAYiC,GACxB3B,MAAOgB,MAAO,iBAAkBE,KAAMxB,EAAa,KAAOiC,EAAaC,KAAM,mBAO1GtB,QC3BH,SAAClB,GACGS,OAAOC,OAAP,MACIC,MAAO,SAACQ,GACJ,GAAMsB,GAAO1B,SAAS2B,OAAS,gBAAkB1C,EAAE,UAAWmB,GAASX,KAAK,WAC5ER,GAAE,UAAWmB,GACRX,KAAK,QAASiC,GACdE,QACGC,MAAO,IACPC,OAAQ,IACRf,KAAMW,OAIvBvB,QCbH,SAAClB,GACGS,OAAOC,OAAO,cACVC,MAAO,SAACQ,GACJnB,EAAE,iBAAkBmB,GAASC,MAAM,SAAAC,GAC/BA,EAAEC,kBACFD,EAAEE,gBAEF,IAAMC,GAASH,EAAEI,OAAOC,WAAW,eAAeC,MAC5CmB,EAAMzB,EAAEI,OAAOC,WAAW,YAAYC,KAE5Cf,OACQgB,MAAOJ,EAAOK,aAAe,IAAMiB,EAAM,IACzCf,kBAAkB,EAClBgB,gBAAgB,GAEpB,SAAAf,GACQA,GACAG,WAAW,WACQ,SAAXX,GACAxB,EAAEgD,KAAK,SAAWF,GAAKZ,KAAK,WACxBnB,SAASsB,WACVC,KAAK,SAAC/B,EAAOD,EAAYiC,GACxB3B,MAAOgB,MAAO,OAAQE,KAAMxB,EAAa,KAAOiC,EAAaC,KAAM,aAG5E,YAM5BtB,QC/BH+B,OAAOC,UAAUrB,WAAa,WAC7B,MAAOsB,MAAKC,OAAO,GAAGC,cAAgBF,KAAKG,MAAM","file":"all.min.js","sourcesContent":["($ => {\n    // oggetto che andra' a contenere i riferimeti ai JS di tutte le pagine\n    window.JSVIEW = {\n        // \"page_name\": {\n        //     \"ready\": function(context) {}\n        // }\n    };\n    \n    /**\n     * Carica la pagina specificata da \"page\"\n     *\n     * @param      {string}   page    nome della pagina da caricare\n     */\n    function loadPage(page) {\n        var $pageBody = $('.page-body');\n        $pageBody.load('/' + page,\n            (responseText, textStatus, jqXHR) => {\n                if (textStatus === 'success') {\n                    $pageBody.attr('data-page', page);\n                    // lancio lo script della pagina caicata\n                    window.JSVIEW[page] && window.JSVIEW[page].ready($pageBody);\n                } else {\n                    swal('Page not found');\n                }\n            });\n    }\n\n    $(() => {\n        // pagina di default\n        const defaultPage = 'sync';\n        // evento scatenato al cambio della parte hash\n        window.onhashchange = (() => {\n            loadPage(location.hash.substr(1) || defaultPage);\n        });\n        // se non ci sono pagine specificate nell'hash, carico una pagina di default\n        loadPage(location.hash.substr(1) || defaultPage);\n    });\n})(jQuery);\n","($ => {\n    window.JSVIEW['remote'] = {\n        ready: (context) => {\n            $('button[data-action]', context).click(e => {\n                e.stopPropagation();\n                e.preventDefault();\n\n                const action = e.target.attributes['data-action'].value;\n\n                swal({\n                        title: action.capitalize() + ' current process?',\n                        text: 'This may take a few seconds.',\n                        showCancelButton: true\n                    },\n                    confirm => {\n                        if (confirm) {\n                            $.get('/remote/' + action).then(() => {\n                                // ritardo il refresh altrimenti rischio che il comando non sia stato ancora eseguito\n                                setTimeout(() => { document.location.reload(true); }, 500);\n                            }).fail((jqXHR, textStatus, errorThrown) => {\n                                swal({ title: 'Load processes', text: textStatus + ': ' + errorThrown, type: 'error' });\n                            });\n                        }\n                    });\n            });\n        }\n    }\n})(jQuery);\n","($ => {\n    window.JSVIEW['sync'] = {\n        ready: (context) => {\n            const code = location.origin + '/v1/sync?sid=' + $('#qrcode', context).attr('data-sid');\n            $('#qrcode', context)\n                .attr('title', code)\n                .qrcode({\n                    width: 256,\n                    height: 256,\n                    text: code\n                });\n        }\n    }\n})(jQuery);\n","($ => {\n    window.JSVIEW['sync/list'] = {\n        ready: (context) => {\n            $('a[data-action]', context).click(e => {\n                e.stopPropagation();\n                e.preventDefault();\n\n                const action = e.target.attributes['data-action'].value;\n                const sid = e.target.attributes['data-sid'].value;\n\n                swal({\n                        title: action.capitalize() + ' ' + sid + '?',\n                        showCancelButton: true,\n                        closeOnConfirm: true\n                    },\n                    confirm => {\n                        if (confirm) {\n                            setTimeout(() => {\n                                if (action === 'sync') {\n                                    $.post('/sync/' + sid).then(() => {\n                                        location.reload();\n                                    }).fail((jqXHR, textStatus, errorThrown) => {\n                                        swal({ title: 'Sync', text: textStatus + ': ' + errorThrown, type: 'error' });\n                                    });\n                                }\n                            }, 100);\n                        }\n                    });\n            });\n        }\n    }\n})(jQuery);\n","String.prototype.capitalize = function() {\n\treturn this.charAt(0).toUpperCase() + this.slice(1);\n};"],"sourceRoot":"/source/"}